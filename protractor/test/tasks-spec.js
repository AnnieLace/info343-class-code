/* Test script for the Tasks List app */
//behavior driven development language

//starts a new suite of tests, takes the name of the test suite
//and a function that defines the tests
//describe is nestable inside of itself if you want to bracket off
//some tests as their own little thing
describe('the tasks app', function() {
    
    //Need references to elements so tests can interact with them
    //element function takes an locator generated by the "by" function
    //gets a model called "newTask.title"
    var taskTitleInp = element(by.model('newTask.title'));
    var addTaskBtn = element(by.buttonText('Add Task'));

    //gets all elements in task list with element.all and
    //by.repeater
    var tasksList = element.all(by.repeater('task in tasks'));

    //select element by style class
    var requiredMsg = $('.title-required-error')

    function addTask(title) {
        //sends string as if the user was typing it in
        taskTitleInp.sendKeys(title);
        //simulates clicking button
        addTaskBtn.click();
    }

    function addMultipleTasks(num) {
        var idx;
        for(idx = 0; idx < num; ++idx) {
            addTask('Task ' + idx);
        }
    }

    //function is executed before each it test
    //need browser.get for each test so you start with a new fresh window
    //every time
    beforeEach(function() {
        //object that allows you to load things into the browser
        //(also get info from the browser)
        //this loads the page into the browser
        browser.get('http://localhost:8000');
    });

    //also takes a descriptive string and a function
    //that is the actual test function
    it('must have the proper page title', function() {
        //chain after expect function
        //toEqual is checker - sees if the result of the 
        //browser.getTitle is 'My Tasks'
        expect(browser.getTitle()).toEqual('My Tasks');
    });

    it('must add a task', function() {
        var title = 'Learn Protractor';
        addTask(title);
        expect(tasksList.count()).toEqual(1);
        expect(tasksList.get(0).getText()).toEqual(title);
    });

    it('must add a task hitting enter', function() {
        var title = 'Learn Protractor';
        taskTitleInp.sendKeys(title);
        //simulates hitting the enter key
        taskTitleInp.sendKeys(protractor.Key.ENTER);
        expect(tasksList.count()).toEqual(1);
        expect(tasksList.get(0).getText()).toEqual(title);
    });

    it('must clear the title after adding', function() {
        addTask('box should get cleared');
        //how you test to see what the contents of an element are
        expect(taskTitleInp.getAttribute('value')).toEqual('');
    });

    it('must add multiple tasks', function() {
        var num = 20;
        addMultipleTasks(num);
        expect(tasksList.count()).toEqual(num);
    });

    //test to make sure error message will show up when you expect it to show up
    it('must show required validation error', function() {
        //error message doesn't show up when page is first loaded
        expect(requiredMsg.isPresent()).toEqual(false);
        taskTitleInp.sendKeys('abc');
        taskTitleInp.clear();
        expect(requiredMsg.isPresent()).toEqual(true);
        taskTitleInp.sendKeys('abc');
        expect(requiredMsg.isPresent()).toEqual(false);
    });

    //check to make sure add task button is disabled 
    it('must disable add task button with blank title', function() {
        //need to test against "true" to make sure it is disabled
        expect(addTaskBtn.getAttribute('disabled')).toEqual('true');
        taskTitleInp.sendKeys('abc');
        //disabled attribute is removed from button if the input is valid
        //test against null since the attribut should no longer be there
        expect(addTaskBtn.getAttribute('disabled')).toBe(null);
        taskTitleInp.clear();
        taskTitleInp.sendKeys('    ');
        expect(addTaskBtn.getAttribute('disabled')).toEqual('true');
    });

    //test for the presence of a style class
    it('must toggle done with click', function() {
        addTask('test style class');
        addTask('not marked as done');
        expect(tasksList.count()).toEqual(2);
        tasksList.get(0).click();
        //would fail equals if another style class gets added
        //to contain ensures it's there
        expect(tasksList.get(0).getAttribute('class')).toContain('completed-task');
        //.not can be added to any chaining function to reverse what goes after it
        expect(tasksList.get(1).getAttribute('class')).not.toContain('completed-task');
    });

    it('must purge completed tasks', function() {
        addTask('Task 1');
        addTask('Task 2');
        expect(tasksList.count()).toEqual(2);
        tasksList.get(0).click();

        //get purge button
        element(by.buttonText('Purge Completed Tasks')).click();
        expect(tasksList.count()).toEqual(1);
        expect(tasksList.get(0).getText()).toEqual('Task 2');
    });

});